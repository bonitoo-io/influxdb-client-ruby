#
# The MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

version: 2.1

commands:
  influxdb-restart:
    steps:
      - run:
          name: "Start InfluxDB service"
          command: ./bin/influxdb-restart.sh
  prepare:
    description: "Prepare environment to tests"
    steps:
      - checkout
      - influxdb-restart
  client-test:
    description: "Run tests"
    parameters:
      ruby-container:
        type: string
        default: &default-ruby-container "2.6"
    steps:
      - restore_cache:
          name: Restoring Gem Cache
          keys:
            - &cache-key gem-cache-<< parameters.ruby-container >>-{{ checksum "influxdb_client.gemspec" }}
            - gem-cache-<< parameters.ruby-container >>-
      - run:
          name: Set ruby version
          command: |
            rvm install << parameters.ruby-container >>
            echo . $(rvm << parameters.ruby-container >> do rvm env --path) >> $BASH_ENV
      - run:
          name: Static code analyze
          command: |
            bundle --version || true
#      - run:
#          name: "Install dependencies"
#          command: |
#            docker run -it --rm \
#                   --volume ${PWD}:/usr/src/ruby \
#                   --workdir /usr/src/ruby \
#                   --network influx_network \
#                   --env INFLUXDB_2_IP=192.168.0.2 \
#                   circleci/ruby:2.6 bundle install --jobs=4 --retry=3 --path /usr/src/ruby/vendor/bundle
#      - run:
#          name: "Running tests"
#          command: |
#            docker run -it --rm \
#                   --volume ${PWD}:/usr/src/mymaven \
#                   --volume ~/.m2:/root/.m2 \
#                   --workdir /usr/src/mymaven \
#                   --network influx_network \
#                   --env INFLUXDB_IP=192.168.0.2 \
#                   --env INFLUXDB_2_IP=192.168.0.3 \
#                   --env INFLUXDB_2_ONBOARDING_IP=192.168.0.4 \
#                   --env INFLUXDB_2_ONBOARDING_PORT=9999 \
#                   maven:<< parameters.maven-container >> mvn -B -U clean install -Dmaven.javadoc.skip=true -Dmaven.dokka.skip=true -Dbuild.env=CI
#      - save_cache:
#          name: Saving Maven Cache
#          key: *cache-key
#          paths:
#            - ~/.m2
#          when: always
  storing-test-results:
    steps:
      - run:
          name: "Copying test results"
          when: always
          command: |
            mkdir test-results
            mkdir test-results/client-core
            cp -r client-core/target/*/TEST-*.xml test-results/client-core || true
            mkdir test-results/client
            cp -r client/target/*/TEST-*.xml test-results/client || true
            mkdir test-results/client-legacy
            cp -r client-legacy/target/*/TEST-*.xml test-results/client-legacy || true
            mkdir test-results/client-reactive
            cp -r client-reactive/target/*/TEST-*.xml test-results/client-reactive || true
            mkdir test-results/client-kotlin
            cp -r client-kotlin/target/*/TEST-*.xml test-results/client-kotlin || true
            mkdir test-results/client-scala
            cp -r client-scala/target/*/TEST-*.xml test-results/client-scala || true
            mkdir test-results/spring
            cp -r spring/target/*/TEST-*.xml test-results/spring || true
            mkdir test-results/flux-dsl
            cp -r flux-dsl/target/*/TEST-*.xml test-results/flux-dsl || true
      - store_test_results:
          path: test-results
  storing-artifacts:
    steps:
      - run:
          name: "Copying artifacts"
          command: |
            mkdir artifacts
            cp -r client-core/target/*.jar artifacts/
            cp -r client/target/*.jar artifacts/
            cp -r client-legacy/target/*.jar artifacts/
            cp -r client-reactive/target/*.jar artifacts/
            cp -r client-kotlin/target/*.jar artifacts/
            cp -r client-scala/target/*.jar artifacts/
            cp -r spring/target/*.jar artifacts/
            cp -r flux-dsl/target/*.jar artifacts/
      - store_artifacts:
          path: artifacts

jobs:
  tests-ruby-2-6:
    machine: true
    steps:
      - prepare
      - client-test:
          ruby-container: *default-ruby-container
#      - storing-test-results
#      - storing-artifacts
#      - run:
#          name: "Collecting coverage reports"
#          command: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

  tests-ruby-2-5:
    machine: true
    steps:
      - prepare
      - client-test:
          ruby-container: "2.5"
#      - storing-test-results
#      - storing-artifacts

#  deploy-snapshot:
#    machine: true
#    steps:
#      - run:
#          name: Early return if this build is from a forked repository
#          command: |
#            if [[ $CIRCLE_PROJECT_USERNAME != "influxdata" ]]; then
#              echo "Nothing to do for forked repositories, so marking this step successful"
#              circleci step halt
#            fi
#      - checkout
#      - run:
#          name: Early return if this build is not a Snapshot version
#          command: |
#            sudo apt-get update
#            sudo apt-get install libxml2-utils
#            export PROJECT_VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
#            echo "Project version: $PROJECT_VERSION"
#            if [[ $PROJECT_VERSION != *SNAPSHOT ]]; then
#              echo "Nothing to do for this build, so marking this step successful"
#              circleci step halt
#            fi
#      - influxdb-restart
#      - restore_cache:
#          name: Restoring Maven Cache
#          keys:
#            - &cache-key-deploy maven-cache-deploy-3-jdk-8-slim-{{ checksum "pom.xml" }}-{{ checksum "client-core/pom.xml" }}-{{ checksum "client/pom.xml" }}-{{ checksum "client-kotlin/pom.xml" }}-{{ checksum "client-legacy/pom.xml" }}-{{ checksum "client-reactive/pom.xml" }}-{{ checksum "client-scala/pom.xml" }}-{{ checksum "client-test/pom.xml" }}-{{ checksum "spring/pom.xml" }}-{{ checksum "flux-dsl/pom.xml" }}
#            - maven-cache-deploy-3-jdk-8-slim-
#            - maven-cache-3-jdk-8-slim-
#      - run:
#          name: Deploying Snapshot
#          command: |
#            docker run -it --rm \
#                   --volume ${PWD}:/usr/src/mymaven \
#                   --volume ~/.m2:/root/.m2 \
#                   --workdir /usr/src/mymaven \
#                   --network influx_network \
#                   --env INFLUXDB_IP=192.168.0.2 \
#                   --env INFLUXDB_2_IP=192.168.0.3 \
#                   --env INFLUXDB_2_ONBOARDING_IP=192.168.0.4 \
#                   --env INFLUXDB_2_ONBOARDING_PORT=9999 \
#                   --env SONATYPE_USERNAME=${SONATYPE_USERNAME} \
#                   --env SONATYPE_PASSWORD=${SONATYPE_PASSWORD} \
#                   maven:3-jdk-8-slim mvn -s scripts/deploy-settings.xml -DskipTests=true clean package deploy
#      - save_cache:
#          name: Saving Maven Cache
#          key: *cache-key-deploy
#          paths:
#            - ~/.m2
#          when: always

workflows:
  version: 2
  build:
    jobs:
      - tests-ruby-2-6
      - tests-ruby-2-5
#      - deploy-snapshot:
#          requires:
#            - tests-jdk-8
#            - tests-jdk-11
#          filters:
#            branches:
#              only: master

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - tests-ruby-2-6
      - tests-ruby-2-5